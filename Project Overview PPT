Now for analyse the PIZZA HUT sales database I have solve some problems.
Basic:
Retrieve the total number of orders placed.
Calculate the total revenue generated from pizza sales.
Identify the highest-priced pizza.
Identify the most common pizza size ordered.
List the top 5 most ordered pizza types along with their quantities.
Intermediate:
Join the necessary tables to find the total quantity of each pizza category ordered.
Determine the distribution of orders by hour of the day.
Join relevant tables to find the category-wise distribution of pizzas.
Group the orders by date and calculate the average number of pizzas ordered per day.
Determine the top 3 most ordered pizza types based on revenue.
Advanced:
Calculate the percentage contribution of each pizza type to total revenue.
Analyze the cumulative revenue generated over time.
Determine the top 3 most ordered pizza types based on revenue for each pizza category.

Answers are here -
Queries for all questions -
1. Retrieve the total number of orders placed -
	SELECT COUNT(Order_id) AS Total_Ordered_Placed FROM Orders;

2. Calculate the total revenue generated from pizza sales - 
	SELECT ROUND ( SUM (Order_details.quantity * pizzas.price), 2 ) AS Total_Sales_Revenue
			FROM Order_details
			JOIN pizzas
			ON Order_details.pizza_id = pizzas.pizza_id ; 

3. Identify the highest-priced pizza -
	SELECT pizza_types.name, pizzas.price
	FROM pizza_types
	JOIN pizzas
	ON pizza_types.pizza_type_id = pizzas.pizza_type_id
	WHERE pizzas.price >= (select max(price) from pizzas);

4. IDENTIFY THE MOST COMMON PIZZA SIZE ORDERED
	SELECT pizzas.size, (count(order_details.order_details_id)) AS Total_Orders
	FROM pizzas
	JOIN order_details
	ON pizzas.pizza_id = order_details.pizza_id
	GROUP BY pizzas.size
	ORDER BY Total_Orders desc LIMIT 1;

5. List the top 5 most ordered pizza types along with their quantities - 
	SELECT pizza_types.name, SUM(order_details.quantity) AS Total_quantity
	FROM pizzas
	JOIN pizza_types
	ON pizzas.pizza_type_id = pizza_types.pizza_type_id
	JOIN order_details
	ON pizzas.pizza_id = order_details.pizza_id
	GROUP BY pizza_types.name
	ORDER BY Total_quantity DESC LIMIT 5 ;

6. Join the necessary tables to find the total quantity of each pizza category ordered - 
	SELECT pizza_types.category, (SUM(order_details.quantity)) AS Total_quantity
	FROM pizzas
	JOIN pizza_types
	ON pizzas.pizza_type_id = pizza_types.pizza_type_id
	JOIN order_details
	ON pizzas.pizza_id = order_details.pizza_id
	GROUP BY pizza_types.category
	ORDER BY Total_quantity DESC;

7. Determine the distribution of orders by hour of the day -
	SELECT (hour(order_time)) AS Hours, (count(order_id)) AS Order_count 
	FROM orders
	GROUP BY hour(order_time)
	ORDER BY Hours;

8. Join relevant tables to find the category-wise distribution of pizzas - 
	SELECT category, COUNT(pizza_type_id)
	FROM pizza_types
	GROUP BY category;

9. Group the orders by date and calculate the average number of pizzas ordered per day - 
	SELECT (ROUND(AVG(Total_quantity),2)) AS Average_quantity_ordered_perday
	FROM 
	(SELECT orders.order_date, (SUM(order_details.quantity)) AS Total_quantity
	FROM orders
	JOIN order_details
	ON orders.order_id = order_details.order_id
	GROUP BY orders.order_date) AS Quantity; 

10. Determine the top 3 most ordered pizza types based on revenue - 
	SELECT pizza_types.name, (SUM(order_details.quantity * pizzas.price)) AS total_orders
	FROM pizzas
	JOIN pizza_types
	ON pizzas.pizza_type_id = pizza_types.pizza_type_id
	JOIN order_details
	ON pizzas.pizza_id = order_details.pizza_id
	GROUP BY pizza_types.name
	ORDER BY total_orders DESC LIMIT 3;

11. Calculate the percentage contribution of each pizza type to total revenue.
	SELECT pizza_types.category,        
			ROUND(SUM(order_details.quantity * pizzas.price) /        
			(SELECT SUM(order_details.quantity * pizzas.price)       
			 FROM order_details         
			JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id) * 100, 2) AS Revenue_percentage
	FROM pizzas
	JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
	JOIN pizza_types ON pizza_types.pizza_type_id = pizzas.pizza_type_id
	GROUP BY pizza_types.category 
	ORDER BY Revenue_percentage desc;


12. Analyze the cumulative revenue generated over time -
	SELECT order_date, sum(total_revenue) over (order by order_date) as cum_revenue
	FROM
	(SELECT orders.order_date, SUM(order_details.quantity * pizzas.price) AS total_revenue
	FROM order_details
	JOIN orders
	ON order_details.order_id = orders.order_id
	JOIN pizzas
	ON pizzas.pizza_id = order_details.pizza_id
	GROUP BY orders.order_date) as date_wise_revenue; 


13. Determine the top 3 most ordered pizza types based on revenue for each pizza category -

	SELECT name, category, revenue
	FROM
	(SELECT name, category, revenue, rank() over(partition by category order by revenue desc) as rn_num
	FROM
	(SELECT pizza_types.name, pizza_types.category, (SUM(order_details.quantity * pizzas.price))AS revenue
	FROM pizzas
	JOIN order_details
	ON pizzas.pizza_id = order_details.pizza_id
	JOIN pizza_types
	ON pizza_types.pizza_type_id = pizzas.pizza_type_id
	GROUP BY pizza_types.name, pizza_types.category) as most_ord_pizza) as rank_wise_revenue
	WHERE rn_num <= 3;





